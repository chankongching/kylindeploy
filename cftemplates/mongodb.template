{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "template to bring up a single instance mongodb server",
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server"
        },
        "ServerTag" : {
                "Type" : "String",
        		"Description" : "for your app identify"
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "m1.small",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ChefServerURL": {
            "Description": "URL of Chef Server",
            "Type": "String"
        },
        "ChefServerIp" : {
            "Description" : "ip address of chef server",
        		"Type" : "String"
        },
        "ChefServerPrivateKeyBucket": {
            "Description": "S3 bucket containing validation private key for Chef Server",
            "Type": "String"
        },
        "ChefAutoScalingSecurityGroup": {
            "Description": "mongodb will open all ports for this security group",
            "Type": "String"
        },
		"ChefClientSecurityGroup" : {
			"Description" : "need this security group to access to Opscode opensource chef server",
			"Type" : "String"
		},
        "InstancePort": {
            "Description": "Listener Port of ec2-instances",
            "Type": "String",
            "Default" : "80"
        },
        "MongodbSubnet" : {
            "Type" : "String",
        		"Description" : "A vpc subnet used for Load Balancer which can't be used by Auto Scaling Group"
        },
        "AvailabilityZone" : {
        		"Type" : "String",
        		"Default" : "ap-northeast-1a",
        		"Description" : "specify the available zone for the subnet"
        },
        "ChefVpc" : {
        		"Type" : "String",
        		"Description" : "a chef vpc"
        },
		"AccessKey" : {
				"Type" : "String",
				"Description" : "Access key id to download validate file and init cloud data"
		},
		"SecretKey" : {
				"Type" : "String",
				"Description" : "Secret key id to download validate file"
		}
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "32": "ami-06ad526f",
                "64": "ami-1aad5273"
            },
            "us-west-1": {
                "32": "ami-116f3c54",
                "64": "ami-136f3c56"
            },
            "us-west-2": {
                "32": "ami-7ef9744e",
                "64": "ami-60f97450"
            },
            "eu-west-1": {
                "32": "ami-359ea941",
                "64": "ami-379ea943"
            },
            "sa-east-1": {
                "32": "ami-e23ae5ff",
                "64": "ami-1e39e603"
            },
            "ap-southeast-1": {
                "32": "ami-62582130",
                "64": "ami-60582132"
            },
            "ap-northeast-1": {
                "32": "ami-2f61fe2e",
                "64": "ami-3561fe34"
            }
        }
    },
    "Resources": {
        "ChefMongoSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open up SSH access and HTTP over port 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
					{
					    "IpProtocol": "-1",
					    "SourceSecurityGroupId": 
						{
					    	"Ref": "ChefAutoScalingSecurityGroup"
					    }
					}
                ],
                "VpcId" : {"Ref" : "ChefVpc"}
            }
        },
		"ChefMongoDBinstance" : {
			"Type" : "AWS::EC2::Instance",
			"Properties" : 
            {
				"InstanceType" : {
					"Ref" : "InstanceType"
				},
				"KeyName" : {
					"Ref" : "KeyName"
				},
				"NetworkInterfaces": [
					{
						"AssociatePublicIpAddress" : "true",
						"DeviceIndex" : "0",
						"DeleteOnTermination" : "true",
						"SubnetId" : {
							"Ref" : "MongodbSubnet"
						},
						"GroupSet" : [
							{
								"Ref" : "ChefMongoSecurityGroup"
							},
							{
								"Ref" : "ChefClientSecurityGroup"
							}
						]
					}
				
				],
				"ImageId": {
					"Fn::FindInMap" : [
						"AWSRegionArch2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap" : [
								"AWSInstanceType2Arch",
								{
									"Ref" : "InstanceType"
								},
								"Arch"
							]
						}
					
					]
				},
				"Tags": [
				          {
				            "Key": "Name",
				            "Value": {
				              "Ref": "ServerTag"
				            }
				          },
				          {
				            "Key": "Environment",
				            "Value": "cloudformationChefenv"
				          }
				        ],
				"UserData" : {
					"Fn::Base64" : {
						"Fn::Join" : [
							"",
							[
								"#!/bin/bash\n",
								"service iptables stop\n",
								"service ip6tables stop\n",
								"chkconfig iptables off\n",
								"chkconfig ip6tables off\n",
								"export HOME=/root\n",
								"function error_exit\n",
								"{\n",
								" /opt/aws/apitools/cfn-init/bin/cfn-signal -e 1 -r \"$1\" '",
								{
									"Ref" : "MongoDBWaitHandle"
								},
								"'\n",
								" exit 1\n",
								"}\n",
								"/opt/aws/apitools/cfn-init/bin/cfn-init -v --region ",
								{
									"Ref" : "AWS::Region"
								},
								"  -s",
								{
									"Ref" : "AWS::StackId"
								},
								" -r ChefMongoDBinstance ",
								"  --access-key ",
								{
									"Ref" : "AccessKey"
								},
								"  --secret-key ",
								{
									"Ref" : "SecretKey"
								},
								" || error_exit 'Failed to run cfn-init'\n",
								"/opt/aws/apitools/cfn-init/bin/cfn-signal -e $? -r 'ChefMongoDBinstance' '",
								{
									"Ref" : "MongoDBWaitHandle"
								},
								"'\n"
							]
						]
					
					}
				}
			},
			"Metadata" : {
				"AWS::CloudFormation::Init" : {
					"config" : {
						"packages" : {
							"yum" : {
								"git": [],
                                "gcc": [],
                                "gcc-c++": [],
                                "automake" : [],
                                "autoconf" : [],
                                "make" : [],
                                "dmidecode" : []
							}
						
						},
						"files" : {
                            "/etc/chef/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "log_level      :info\n",
                                            "log_location    STDOUT\n",
                                            "chef_server_url '",
                                            {
                                                "Ref": "ChefServerURL"
                                            },
                                            "'\n",
                                            ""
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "group": "root",
                                "owner": "root"
                            },
                            "/root/.s3cfg": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "access_key = ",
                                            {
                                                "Ref": "AccessKey"
                                            },
                                            "\n",
                                            "secret_key = ",
                                            {
                                                "Ref" : "SecretKey"
                                            },
                                            "\n",
                                            "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
							
						},
						"commands" : {
                            "01mkdir": {
                                "command": "mkdir -p /home/ec2-user/tools",
                                "cwd": "/home/ec2-user",
                                "ignoreErrors": "true"
                            },
                            "02s3cmd": {
                                "command": "wget http://hivelocity.dl.sourceforge.net/project/s3tools/s3cmd/1.5.0-alpha1/s3cmd-1.5.0-alpha1.tar.gz;tar zxvf s3cmd-1.5.0-alpha1.tar.gz",
                                "cwd": "/home/ec2-user/tools"
                            },
                            "03installs3cmd": {
                                "command": "python setup.py install",
                                "cwd": "/home/ec2-user/tools/s3cmd-1.5.0-alpha1"
                            },
                            "04downloadpem": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "s3cmd get s3://",
                                            {
                                                "Ref": "ChefServerPrivateKeyBucket"
                                            },
                                            "/chef-validator.pem /etc/chef/validation.pem"
                                        ]
                                    ]
                                },
                                "cwd": "/home/ec2-user"
                            },
                            "05chpem": {
                                "command": "chmod 644 /etc/chef/validation.pem",
                                "cwd": "/home/ec2-user"
                            },
                            "09installchefclient" : {
                            		"command" : "curl -L https://www.opscode.com/chef/install.sh | bash",
                            		"cwd" : "/home/ec2-user/tools"
                            },
                            "10installec2metadata" : {
                            		"command" : "wget http://s3.amazonaws.com/ec2metadata/ec2-metadata;chmod u+x ./ec2-metadata",
                            		"cwd" : "/home/ec2-user/tools"
                            },
                            "11confignodename" : {
                            	  "command" : "tempVar=$( /home/ec2-user/tools/ec2-metadata -i | cut -d' ' -f2 );echo node_name \\'${tempVar}\\' >> /etc/chef/client.rb",
                            	  "cwd" : "/home/ec2-user/tools"
                            },
							"12installmongodbd": {
								 "command" : {
	                                    "Fn::Join": [
	                                        "",
	                                        [
	                                            "/usr/bin/chef-client --server ",
	                                            {
	                                                "Ref": "ChefServerURL"
	                                            },
	                                            " -o 'recipe[mongodb]'"
	                                        ]
	                                    ]
								 },
								 "cwd" : "/home/ec2-user"
							}
							
						}
					}
				}
			}
		
		},
		"MongoDBWaitHandle": {
			"Type" : "AWS::CloudFormation::WaitConditionHandle"
		},
		"MongoDBWaitCondition": {
			"Type" : "AWS::CloudFormation::WaitCondition",
			"DependsOn" : "ChefMongoDBinstance",
			"Properties": {
				"Handle" : {
					"Ref" : "MongoDBWaitHandle"
				},
				"Timeout" : "1200"
			}
		}

       
       
        
       
         
        
    },
    "Outputs": {
		"ServerURL": {
		      "Description": "URL of mongodb server",
		      "Value": {
		        "Fn::Join": [
		          "",
		          [
		            "",
		            {
		              "Fn::GetAtt": [
		                "ChefMongoDBinstance",
		                "PrivateDnsName"
		              ]
		            }
		            
		          ]
		        ]
		      }
		  }
    }

}