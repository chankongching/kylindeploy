{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "template to bring up a set of chef clients with auto scaling",
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server"
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "m1.small",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ChefServerURL": {
            "Description": "URL of Chef Server",
            "Type": "String"
        },
        "ChefServerPrivateKeyBucket": {
            "Description": "S3 bucket containing validation private key for Chef Server",
            "Type": "String"
        },
        "ChefServerSecurityGroup": {
            "Description": "Security group to get access to Opscode Chef Server",
            "Type": "String"
        },
        "InstancePort": {
            "Description": "Listener Port of ec2-instances",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "32": "ami-06ad526f",
                "64": "ami-1aad5273"
            },
            "us-west-1": {
                "32": "ami-116f3c54",
                "64": "ami-136f3c56"
            },
            "us-west-2": {
                "32": "ami-7ef9744e",
                "64": "ami-60f97450"
            },
            "eu-west-1": {
                "32": "ami-359ea941",
                "64": "ami-379ea943"
            },
            "sa-east-1": {
                "32": "ami-e23ae5ff",
                "64": "ami-1e39e603"
            },
            "ap-southeast-1": {
                "32": "ami-62582130",
                "64": "ami-60582132"
            },
            "ap-northeast-1": {
                "32": "ami-2f61fe2e",
                "64": "ami-3561fe34"
            }
        }
    },
    "Resources": {
        "ChefClientUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:DescribeStackResource",
                                        "s3:Get"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "ChefClientUser"
                }
            }
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "ReadPolicy",
                    "Statement": [
                        {
                            "Sid": "ReadAccess",
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "ChefServerPrivateKeyBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "ChefClientUser",
                                        "Arn"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "ChefServerPrivateKeyBucket"
                }
            }
        },
        "ChefCSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open up SSH access and HTTP over port 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ChefLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "BucketPolicy",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "git" : [],
                                "ruby19": [],
                                "ruby19-devel" : [],
                                "ruby19-irb" : [],
                                "ruby19-libs" : [],
                                "rubygem19-io-console" : [],
                                "rubygem19-json" : [],
                                "rubygem19-rake" : [],
                                "rubygem19-rdoc" : [],
                                "rubygems19" : [],
                                "rubygems19-devel" : [],
                                "gcc": [],
                                "gcc-c++": [],
                                "automake" : [],
                                "autoconf" : [],
                                "make" : [],
                                "dmidecode" : [],
                                "mysql" : []
                            }
                        },
                        "files": {
                            "/home/ec2-user/.aws/config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "aws_access_key_id = ",
                                            {
                                                "Ref": "HostKeys"
                                            },
                                            "\n",
                                            "aws_secret_access_key = ",
                                            {
                                                "Fn::GetAtt": [
                                                    "HostKeys",
                                                    "SecretAccessKey"
                                                ]
                                            },
                                            "\n",
                                            "region  = ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000640",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "log_level      :info\n",
                                            "log_location    STDOUT\n",
                                            "chef_server_url '",
                                            {
                                                "Ref": "ChefServerURL"
                                            },
                                            "'\n",
                                            ""
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "group": "root",
                                "owner": "root"
                            },
                            "/root/.s3cfg": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "access_key = ",
                                            {
                                                "Ref": "HostKeys"
                                            },
                                            "\n",
                                            "secret_key = ",
                                            {
                                                "Fn::GetAtt": [
                                                    "HostKeys",
                                                    "SecretAccessKey"
                                                ]
                                            },
                                            "\n",
                                            "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01mkdir": {
                                "command": "mkdir -p /home/ec2-user/tools;mkdir -p /var/app",
                                "cwd": "/home/ec2-user",
                                "ignoreErrors": "true"
                            },
                            "02s3cmd": {
                                "command": "wget http://hivelocity.dl.sourceforge.net/project/s3tools/s3cmd/1.5.0-alpha1/s3cmd-1.5.0-alpha1.tar.gz;tar zxvf s3cmd-1.5.0-alpha1.tar.gz",
                                "cwd": "/home/ec2-user/tools"
                            },
                            "03installs3cmd": {
                                "command": "python setup.py install",
                                "cwd": "/home/ec2-user/tools/s3cmd-1.5.0-alpha1"
                            },
                            "04downloadpem": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "s3cmd get ",
                                            "s3://",
                                            {
                                                "Ref": "ChefServerPrivateKeyBucket"
                                            },
                                            "/chef-validator.pem /etc/chef/validation.pem"
                                        ]
                                    ]
                                },
                                "cwd": "/home/ec2-user"
                            },
                            "05chpem": {
                                "command": "chmod 644 /etc/chef/validation.pem",
                                "cwd": "/home/ec2-user"
                            },
                            "08installdrush" : {
                            		"command" : "git clone https://github.com/drush-ops/drush.git;ln -sf /home/ec2-user/tools/drush/drush /usr/bin/drush",
                            		"cwd" : "/home/ec2-user/tools"
                            },
                            "09installchefclient" : {
                            		"command" : "gem1.9 install rdoc;gem1.9 install chef --no-rdoc --no-ri;gem1.9 install ruby-shadow;gem1.9 install ohai;gem1.9 install json",
                            		"cwd" : "/home/ec2-user/tools"
                            },
                            "48registernode": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "/usr/local/bin/chef-client --server ",
                                            {
                                                "Ref": "ChefServerURL"
                                            },
                                            " -o 'role[chefclient]'"
                                        ]
                                    ]
                                },
                                "cwd": "/home/ec2-user"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "ChefServerSecurityGroup"
                    },
                    {
                        "Ref": "ChefCSecurityGroup"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "export AWS_CONFIG_FILE=/home/ec2-user/.aws/config\n",
                                "export HOME=/root\n",
                                "service iptables stop\n",
                                "service ip6tables stop\n",
                                "chkconfig iptables off \n",
                                "chkconfig ip6tables off\n",
                                "function error_exit\n",
                                "{\n",
                                "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                                {
                                    "Ref": "ChefClientWaitHandle"
                                },
                                "'\n",
                                " exit 1 \n",
                                "}\n",
                                "/opt/aws/bin/cfn-init -v --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "  -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r ChefLaunchConfig",
                                " --access-key ",
                                {
                                    "Ref": "HostKeys"
                                },
                                " --secret-key ",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " || error-exit 'failed to run cfn init'\n",
                                "#if well,signal success\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e $? -r 'Chef client configration' '",
                                {
                                    "Ref": "ChefClientWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                }
            }
        },
        "AWSLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "ToPort": "80",
                        "FromPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "GroupDescription": "Load Balancer Security Group"
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": {
                            "Ref": "InstancePort"
                        },
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Timeout": "5",
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "TCP:",
                                {
                                    "Ref": "InstancePort"
                                }
                            ]
                        ]
                    },
                    "Interval": "30",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "5"
                }
            }
        },
        "AWSChefAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "Cooldown": "360",
                "MinSize": "1",
                "MaxSize": "1",
                "LaunchConfigurationName": {
                    "Ref": "ChefLaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ]
            }
        },
        "EC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open up SSH access and HTTP over port 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ChefClientWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "ChefClientWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "AWSChefAutoScalingGroup",
            "Properties": {
                "Handle": {
                    "Ref": "ChefClientWaitHandle"
                },
                "Timeout": "1200",
                "Count": "1"
            }
        }
    },
    "Outputs": {
        "LoadBalancerDNS": {
            "Description": "the DNS of load balancer",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                ]
            }
        }
    }
}