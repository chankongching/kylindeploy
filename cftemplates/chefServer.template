{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "chef server on amazon linux,set up chef server and chef workstation registed as ec2-user admin client.a drupal database is installed to rds and configure the source code ",
  "Parameters": {
    "KeyName": {
      "Type": "String",
      "Default": "drucloud",
      "Description": "Note: do not input .pem suffix! Name of an existing EC2 KeyPair to enable SSH access to the web server"
    },
	"VpcSecurityGroup":{
		"Type" : "String",
		"Description" : "security group in this vpc"
	},
    "ServerTagName": {
      "Type": "String",
      "Description": "the name you want to apply to chef server"
    },
    "ChefSubnet": {
      "Type": "String",
      "Description": "a vpc subnet used for chef server and chef clients"
    },
    "ChefVpc": {
      "Type": "String",
      "Description": "a chef vpc"
    },
    "ResourceBucket": {
      "Type": "String",
      "Default": "guojing",
      "Description": "bucket name,where resource and rb script is put"
    },
    "GitRepo": {
      "Type": "String",
	  "Default" : "git@bitbucket.org:guojing/chat_box.git",
      "Description": "a url to your source code managed by git"
    },
    "AuthorizationFile": {
      "Type": "String",
      "Default": "bitbucket.tar.gz",
      "Description": "authoriztion file to access to bitbucket"
    },
    "S3KeyId": {
      "Type": "String",
      "Description": "key id to access to resource s3 bucket"
    },
    "S3SecKey": {
      "Type": "String",
      "Description": "secret key to access to resource s3 bucket"
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "64"
      },
      "m1.small": {
        "Arch": "64"
      },
      "m1.medium": {
        "Arch": "64"
      },
      "m1.large": {
        "Arch": "64"
      },
      "m1.xlarge": {
        "Arch": "64"
      },
      "m2.xlarge": {
        "Arch": "64"
      },
      "m2.2xlarge": {
        "Arch": "64"
      },
      "m2.4xlarge": {
        "Arch": "64"
      },
      "m3.xlarge": {
        "Arch": "64"
      },
      "m3.2xlarge": {
        "Arch": "64"
      },
      "c1.medium": {
        "Arch": "64"
      },
      "c1.xlarge": {
        "Arch": "64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "32": "ami-06ad526f",
        "64": "ami-1aad5273"
      },
      "us-west-1": {
        "32": "ami-116f3c54",
        "64": "ami-136f3c56"
      },
      "us-west-2": {
        "32": "ami-7ef9744e",
        "64": "ami-60f97450"
      },
      "eu-west-1": {
        "32": "ami-359ea941",
        "64": "ami-379ea943"
      },
      "sa-east-1": {
        "32": "ami-e23ae5ff",
        "64": "ami-1e39e603"
      },
      "ap-southeast-1": {
        "32": "ami-62582130",
        "64": "ami-60582132"
      },
      "ap-southeast-2": {
        "32": "ami-858611bf",
        "64": "ami-fb8611c1"
      },
      "ap-northeast-1": {
        "32": "ami-2f61fe2e",
        "64": "ami-3561fe34"
      }
    }
  },
  "Resources": {
    "ChefEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "ChefServer"
        }
      }
    },
    "SecurityGroupRule": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
            "GroupId" : {"Ref":"VpcSecurityGroup"},
			"IpProtocol" : "tcp",
			"FromPort" : "22",
			"ToPort" : "22",
			"CidrIp" : "0.0.0.0/0"
        }
    },
    "ChefServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "git": [],
                "gcc": [],
                "gcc-c++": [],
                "mysql": [],
                "php": [],
                "php-devel": [],
                "php-cli": [],
                "php-fpm": [],
                "php-gd": [],
                "php-mbstring": [],
                "php-mcrypt": [],
                "php-pdo": [],
                "php-xml": [],
                "php-xmlrpc": [],
                "php-mysql": [],
                "php-pecl-memcache": [],
                "zlib-devel": [],
                "libevent": [],
                "libevent-devel": [],
                "nfs-utils": [],
                "ruby19": [],
                "ruby19-devel" : [],
                "ruby19-irb" : [],
                "ruby19-libs" : [],
                "rubygem19-io-console" : [],
                "rubygem19-json" : [],
                "rubygem19-rake" : [],
                "rubygem19-rdoc" : [],
                "rubygems19" : [],
                "rubygems19-devel" : []
              }
            },
            "files": {
              "/home/ec2-user/.aws/config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]\n",
                      "aws_access_key_id = ",
                      {
                        "Ref": "HostKeys"
                      },
                      "\n",
                      "aws_secret_access_key = ",
                      {
                        "Fn::GetAtt": [
                          "HostKeys",
                          "SecretAccessKey"
                        ]
                      },
                      "\n",
                      "region  = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000640",
                "owner": "root",
                "group": "root"
              },
              "/root/.s3cfg": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]\n",
                      "access_key = ",
                      {
                        "Ref": "HostKeys"
                      },
                      "\n",
                      "secret_key = ",
                      {
                        "Fn::GetAtt": [
                          "HostKeys",
                          "SecretAccessKey"
                        ]
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },
              "/home/ec2-user/knifeconfigure.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#/bin/sh",
                      "PASSWORD='123456'\n",
					  "/opt/chef-server/embedded/bin/knife configure -d -y -i -c /home/ec2-user/chef11/chef-repo/.chef/knife.rb --server-url https://$( /home/ec2-user/tools/ec2-metadata -o | cut -d ' ' -f2 ):443 -u ec2-user --validation-client-name chef-validator --validation-key /etc/chef-server/chef-validator.pem -r /home/ec2-user/chef11/chef-repo --admin-client-name chef-webui --admin-client-key /etc/chef-server/chef-webui.pem << END_SCRIPT\n",
					  "quote PASSWORD $PASSWORD\n",
					  "quit\n",
					  "END_SCRIPT\n",
					  "exit 0"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "010mkdir": {
                "command": "mkdir -p /home/ec2-user/tools /home/ec2-user/.pem /var/app",
                "cwd": "/home/ec2-user",
                "ignoreErrors": "true"
              },
              "012oinstallec2metadata": {
                "command": "wget http://s3.amazonaws.com/ec2metadata/ec2-metadata;chmod u+x ./ec2-metadata",
                "cwd": "/home/ec2-user/tools"
              },
              "013installmongophp": {
                "command": "pecl install mongo;echo extension=mongo.so >> /etc/php.d/mongo.ini;chmod 644 /etc/php.d/mongo.ini",
                "cwd": "/home/ec2-user/tools"
              },
              "020downloadrpm": {
                "command": "wget https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-server-11.0.10-1.el6.x86_64.rpm",
                "cwd": "/home/ec2-user/tools"
              },
              "030installchefS": {
                "command": "rpm -Uvh /home/ec2-user/tools/chef-server-11.0.10-1.el6.x86_64.rpm",
                "cwd": "/home/ec2-user/tools"
              },
              "040replacerb": {
                "command": "sed -i '31s/sysvinit/upstart/g' /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb",
                "cwd": "/home/ec2-user"
              },
              "042reosolvehostname": {
                "command": "echo \"`/home/ec2-user/tools/ec2-metadata -o | cut -d ' ' -f2` `hostname`\" >> /etc/hosts",
                "cwd": "/home/ec2-user"
              },
              "050reconfigurechef": {
                "command": "chef-server-ctl reconfigure",
                "cwd": "/home/ec2-user",
                "waitAfterCompletion": "10"
              },
              "060s3cmd": {
                "command": "wget http://hivelocity.dl.sourceforge.net/project/s3tools/s3cmd/1.5.0-alpha1/s3cmd-1.5.0-alpha1.tar.gz;tar zxvf s3cmd-1.5.0-alpha1.tar.gz",
                "cwd": "/home/ec2-user/tools"
              },
              "070installs3cmd": {
                "command": "python setup.py install",
                "cwd": "/home/ec2-user/tools/s3cmd-1.5.0-alpha1"
              },
              "080uploadpem2s3": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "s3cmd put /etc/chef-server/chef-validator.pem s3://",
                      {
                        "Ref": "PrivateKeyBucket"
                      },
                      "/"
                    ]
                  ]
                },
                "cwd": "/home/ec2-user"
              },
              "100mkdirforchefworkstaiton": {
                "command": "mkdir -p /home/ec2-user/chef11",
                "cwd": "/home/ec2-user"
              },
              "110clonechefrepo": {
                "command": "git clone git://github.com/opscode/chef-repo.git",
                "cwd": "/home/ec2-user/chef11"
              },
              "120mkconfigrepo": {
                "command": "mkdir -p /home/ec2-user/chef11/chef-repo/.chef;touch /home/ec2-user/chef11/chef-repo/.chef/knife.rb;mv /home/ec2-user/knifeconfigure.sh chef11/chef-repo/",
                "cwd": "/home/ec2-user"
              },
              "130setworkstation": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "./knifeconfigure.sh"
                    ]
                  ]
                },
                "cwd": "/home/ec2-user/chef11/chef-repo"
              },
              "150configknifessh": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo ' ' >> /home/ec2-user/chef11/chef-repo/.chef/knife.rb;",
                      "echo knife[:identity_file] = \\'/home/ec2-user/.pem/",
                      {
                        "Ref": "KeyName"
                      },
                      ".pem\\' >> /home/ec2-user/chef11/chef-repo/.chef/knife.rb;",
                      "echo knife[:ssh_user] = \\'ec2-user\\' >> /home/ec2-user/chef11/chef-repo/.chef/knife.rb"
                    ]
                  ]
                },
                "cwd": "/home/ec2-user"
              },
              "160downloadsshpem": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "s3cmd --access_key=",
                      {
                        "Ref": "S3KeyId"
                      },
                      " --secret_key=",
                      {
                        "Ref": "S3SecKey"
                      },
                      " get s3://",
                      {
                        "Ref": "ResourceBucket"
                      },
                      "/",
                      {
                        "Ref": "KeyName"
                      },
                      ".pem ./;",
                      "chmod 600 ",
                      {
                        "Ref": "KeyName"
                      },
                      ".pem"
                    ]
                  ]
                },
                "cwd": "/home/ec2-user/.pem"
              },
              "170downloadaccesstobitbucket": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "s3cmd --access_key=",
                      {
                        "Ref": "S3KeyId"
                      },
                      " --secret_key=",
                      {
                        "Ref": "S3SecKey"
                      },
                      " get s3://",
                      {
                        "Ref": "ResourceBucket"
                      },
                      "/",
                      {
                        "Ref": "AuthorizationFile"
                      },
                      " ./;tar zxf ",
                      {
                        "Ref": "AuthorizationFile"
                      },
                      ";chmod 600 bitbucket bitbucket.pub config known_hosts"
                    ]
                  ]
                },
                "cwd": "/root/.ssh"
              },
              "180downloadsourcecode": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "mkdir /var/app/source;git clone ",
                      {
                        "Ref": "GitRepo"
                      },
                      " /var/app/source;"
                    ]
                  ]
                },
                "cwd": "/home/ec2-user"
              },
              "210downloadrecipe": {
                "command": "git clone git@bitbucket.org:mobingi/mocloud.git",
                "cwd": "/home/ec2-user/tools"
              },
			  "211checkoutrecipe": {
			  	"command" : "git fetch && git checkout moCloud-php",
				"cwd" : "/home/ec2-user/tools/mocloud"
			  },
              "220mvrecipe2workstation": {
                "command": "cp -rf /home/ec2-user/tools/mocloud/resources/chef/cookbooks/* /home/ec2-user/chef11/chef-repo/cookbooks/;cp -rf /home/ec2-user/tools/mocloud/resources/chef/roles/* /home/ec2-user/chef11/chef-repo/roles/;cp -Rf /home/ec2-user/tools/mocloud/resources/chef/crontab /home/ec2-user/chef11/chef-repo/",
                "cwd": "/home/ec2-user"
              },
			  "221replacedefaultruby" : {
			  	"command" : "ln -sf /usr/bin/ruby1.9 /usr/bin/ruby",
				"cwd" : "/home/ec2-user"
			  },
              "230uploadcookbook": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cat /root/.ssh/bitbucket > cookbooks/php/templates/default/bitbucket.erb;",
                      "cat /root/.ssh/bitbucket.pub > cookbooks/php/templates/default/bitbucket.pub.erb;",
                      "cat /root/.ssh/config > cookbooks/php/templates/default/config.erb;",
                      "cat /root/.ssh/known_hosts > cookbooks/php/templates/default/known_hosts.erb;",
                      "/opt/chef-server/embedded/bin/knife cookbook upload --all;",
                      "/opt/chef-server/embedded/bin/knife role from file roles/chefclient.json "
                    ]
                  ]
                },
                "cwd": "/home/ec2-user/chef11/chef-repo"
              },
              "290createappuser" : {
                  "command" : "useradd -c 'app user' -s /bin/bash -m webapp -d /home/webapp -G apache;",
                  "ignoreErrors" : "true"
              },
			  "300preparenfs" : {
			                    "command" : {
			                        "Fn::Join" : ["",[
			                            "echo \"/opt/nfs/source `hostname -i`/255.255.0.0(rw,no_root_squash,async)\" >> /etc/exports;chmod 644 /etc/exports;mkdir -p /opt/nfs/source"
			                        ]]
			                    }
			  },
			  "310startnfsserver": {
			                  "command": {
			                    "Fn::Join": [
			                      "",
			                      [
			                        "/etc/init.d/rpcbind start;chkconfig rpcbind on;",
			                        "/etc/init.d/rpcidmapd start;chkconfig rpcidmapd on;",
			                        "/etc/init.d/nfs start;chkconfig nfs on"
			                      ]
			                    ]
			                  }
			   },
			   "320configurechefnfs" : {
			                     "command" : "tempVar=`hostname -i`;sed -i \"s/iptochange/$tempVar/g\" /home/ec2-user/chef11/chef-repo/cookbooks/sourcecode/attributes/default.rb;/opt/chef-server/embedded/bin/knife cookbook upload sourcecode",
			                     "cwd" : "/home/ec2-user/chef11/chef-repo"
			   },
			   "330mvcode2sharefolder" : {
			                     "command" : "cp -Rf /var/app/source/* /opt/nfs/source;cp -Rf /var/app/source/.[^.]* /opt/nfs/source/;"
			   }
			  
            }
          }
        }
      },
      "Properties": {
        "SecurityGroupIds": [
          {
            "Ref": "VpcSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "service iptables stop\n",
                "service ip6tables stop\n",
                "chkconfig iptables off\n",
                "chkconfig ip6tables off\n",
                "export HOME=/root\n",
                "export RANDFILE=$HOME/chef.rnd\n",
                "export AWS_CONFIG_FILE=/home/ec2-user/.aws/config\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/apitools/cfn-init/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "ChefServerWaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "/opt/aws/apitools/cfn-init/bin/cfn-init -v  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "    -s ",
				
                {
                  "Ref": "AWS::StackId"
                },
                " -r ChefServer ",
                "         --access-key ",
                {
                  "Ref": "HostKeys"
                },
                "         --secret-key ",
                {
                  "Fn::GetAtt": [
                    "HostKeys",
                    "SecretAccessKey"
                  ]
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e $? -r 'Chef Server configuration' '",
                {
                  "Ref": "ChefServerWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SubnetId": {
          "Ref": "ChefSubnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ServerTagName"
            }
          },
          {
            "Key": "Environment",
            "Value": "cloudformationChefenv"
          }
        ]
      }
    },
    "ChefServerUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStackResource",
                    "s3:Put"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "HostKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Status": "Active",
        "UserName": {
          "Ref": "ChefServerUser"
        }
      }
    },

    "PrivateKeyBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private"
      },
      "DeletionPolicy": "Delete"
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Id": "WritePolicy",
          "Statement": [
            {
              "Sid": "WriteAccess",
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "PrivateKeyBucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "ChefServerUser",
                    "Arn"
                  ]
                }
              }
            }
          ]
        },
        "Bucket": {
          "Ref": "PrivateKeyBucket"
        }
      }
    },
    "ChefServerWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "ChefServerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "ChefServer",
      "Properties": {
        "Handle": {
          "Ref": "ChefServerWaitHandle"
        },
        "Timeout": "1200"
      }
    }
  },
  "Outputs": {
    "WebUI": {
      "Description": "URL of Opscode chef server WebUI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ChefServer",
                "PublicDnsName"
              ]
            },
            ":443"
          ]
        ]
      }
    },
    "ServerURL": {
      "Description": "URL of newly created Opscode chef server",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "ChefServer",
                "PrivateDnsName"
              ]
            },
            ":443"
          ]
        ]
      }
    },
    "ValidationKeyBucket": {
      "Description": "Location of validation key",
      "Value": {
        "Ref": "PrivateKeyBucket"
      }
    }
  }
}