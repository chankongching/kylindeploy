{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "chef server on amazon linux,set up chef server and chef workstation registed as ec2-user admin client.a drupal database is installed to rds and configure the source code ",
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Default": "drucloud",
            "Description": "Note: do not input .pem suffix! Name of an existing EC2 KeyPair to enable SSH access to the web server"
        },
        "ChefSubnet" : {
            	"Type" : "String",
        		"Default" : "subnet-37fcb671",
        		"Description" : "a vpc subnet used for chef server and chef clients"
        },
        "ChefVpc" : {
        		"Type" : "String",
        		"Default" : "vpc-353d3557",
        		"Description" : "a chef vpc"
        },
        "ResourceBucket" : {
            	"Type" : "String",
        		"Default" : "guojing",
        		"Description" : "bucket name,where resource and rb script is put"
        },
        "DownloadSourceCommand" : {
        		"Type" : "String",
        		"Default" : "git clone git@bitbucket.org:guojing/privaterepo.git",
        		"Description" : "command to download source code from bitbucket"
        },
        "AuthorizationFile" : {
        		"Type" : "String",
        		"Default" : "bitbucket.tar.gz",
        		"Description" : "authoriztion file to access to bitbucket"
        },
        "S3KeyId" : {
        		"Type" : "String",
        		"Description" : "key id to access to resource s3 bucket"
        },
        "S3SecKey" : {
        		"Type" : "String",
        		"Description" : "secret key to access to resource s3 bucket"
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "m1.small",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "m3.xlarge": {
                "Arch": "64"
            },
            "m3.2xlarge": {
                "Arch": "64"
            },
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "32": "ami-06ad526f",
                "64": "ami-1aad5273"
            },
            "us-west-1": {
                "32": "ami-116f3c54",
                "64": "ami-136f3c56"
            },
            "us-west-2": {
                "32": "ami-7ef9744e",
                "64": "ami-60f97450"
            },
            "eu-west-1": {
                "32": "ami-359ea941",
                "64": "ami-379ea943"
            },
            "sa-east-1": {
                "32": "ami-e23ae5ff",
                "64": "ami-1e39e603"
            },
            "ap-southeast-1": {
                "32": "ami-62582130",
                "64": "ami-60582132"
            },
            "ap-southeast-2": {
                "32": "ami-858611bf",
                "64": "ami-fb8611c1"
            },
            "ap-northeast-1": {
                "32": "ami-2f61fe2e",
                "64": "ami-3561fe34"
            }
        }
    },
    "Resources": {
    		"ChefEIP" : {
    				"Type" : "AWS::EC2::EIP",
    				"Properties" : {
    								"Domain" : "vpc",
    								"InstanceId" : {"Ref" : "ChefServer"}
    				}
    		},
        "ChefServer": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                    		"packages": {
                            "yum": {
                               "git" : [],
                                "gcc": [],
                                "gcc-c++": [],
                                "mysql" : [],
                                "php54" : [],
                                "php54-cli" : [],
                                "php54-fpm" : [],
                                "php54-gd" : [],
                                "php54-mbstring" : [],
                                "php54-mcrypt" : [],
                                "php54-pdo" : [],
                                "php54-xml" : [],
                                "php54-xmlrpc" : [],my
                                "php54-mysql" : []
                            }
                        },
                        "files": {
                            "/home/ec2-user/.aws/config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "aws_access_key_id = ",
                                            {
                                                "Ref": "HostKeys"
                                            },
                                            "\n",
                                            "aws_secret_access_key = ",
                                            {
                                                "Fn::GetAtt": [
                                                    "HostKeys",
                                                    "SecretAccessKey"
                                                ]
                                            },
                                            "\n",
                                            "region  = ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000640",
                                "owner": "root",
                                "group": "root"
                            },
                            "/root/.s3cfg": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "access_key = ",
                                            {
                                                "Ref": "HostKeys"
                                            },
                                            "\n",
                                            "secret_key = ",
                                            {
                                                "Fn::GetAtt": [
                                                    "HostKeys",
                                                    "SecretAccessKey"
                                                ]
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000600",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01mkdir": {
                                "command": "mkdir -p /home/ec2-user/tools /home/ec2-user/.pem /var/app",
                                "cwd": "/home/ec2-user",
                                "ignoreErrors": "true"
                            },
                            "02downloadrpm": {
                                "command": "wget https://opscode-omnitruck-release.s3.amazonaws.com/el/6/x86_64/chef-server-11.0.4-1.el6.x86_64.rpm",
                                "cwd": "/home/ec2-user/tools"
                            },
                            "03installchefS": {
                                "command": "rpm -Uvh /home/ec2-user/tools/chef-server-11.0.4-1.el6.x86_64.rpm",
                                "cwd": "/home/ec2-user/tools"
                            },
                            "04replacerb": {
                                "command": "sed -i '31s/sysvinit/upstart/g' /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb",
                                "cwd": "/home/ec2-user"
                            },
                            "05reconfigurechef": {
                                "command": "chef-server-ctl reconfigure",
                                "cwd": "/home/ec2-user",
                                "waitAfterCompletion": "10"
                            },
                            "06s3cmd": {
                                "command": "wget http://hivelocity.dl.sourceforge.net/project/s3tools/s3cmd/1.5.0-alpha1/s3cmd-1.5.0-alpha1.tar.gz;tar zxvf s3cmd-1.5.0-alpha1.tar.gz",
                                "cwd": "/home/ec2-user/tools"
                            },
                            "07installs3cmd": {
                                "command": "python setup.py install",
                                "cwd": "/home/ec2-user/tools/s3cmd-1.5.0-alpha1"
                            },
                            "08uploadpem2s3": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "s3cmd put /etc/chef-server/chef-validator.pem s3://",
                                            {
                                                "Ref": "PrivateKeyBucket"
                                            },
                                            "/"
                                        ]
                                    ]
                                },
                                "cwd": "/home/ec2-user"
                            },
                            "10mkdirforchefworkstaiton" : {
                                    "command" : "mkdir -p /home/ec2-user/chef11",
                                    "cwd" : "/home/ec2-user"
                            },
                            "11clonechefrepo" : {
                                    "command" : "git clone git://github.com/opscode/chef-repo.git",
                                    "cwd" : "/home/ec2-user/chef11"
                            },
                            "12mkconfigrepo" : {
                                    "command" : "mkdir -p /home/ec2-user/chef11/chef-repo/.chef;touch /home/ec2-user/chef11/chef-repo/.chef/knife.rb",
                                    "cwd" : "/home/ec2-user"
                            },
                            "12oinstallec2metadata" : {
                            		"command" : "wget http://s3.amazonaws.com/ec2metadata/ec2-metadata;chmod u+x ./ec2-metadata",
                            		"cwd" : "/home/ec2-user/tools"
                            },
                            "13setworkstation" : {
                            				"command" : {"Fn::Join" : ["",[
                            									"/opt/chef-server/bin/knife configure -y -i -c /home/ec2-user/chef11/chef-repo/.chef/knife.rb --server-url ",
                            									"https://$( /home/ec2-user/tools/ec2-metadata -o | cut -d ' ' -f2 ):443 ",
                        											"-u ec2-user --validation-client-name chef-validator --validation-key /etc/chef-server/chef-validator.pem -r /home/ec2-user/chef11/chef-repo --admin-client-name chef-webui --admin-client-key /etc/chef-server/chef-webui.pem"
                            				
                            				]]},
                            				"cwd" : "/home/ec2-user/chef11/chef-repo"
                            },
                            "14installdrush" : {
                            		"command" : "git clone https://github.com/drush-ops/drush.git;ln -sf /home/ec2-user/tools/drush/drush /usr/bin/drush",
                            		"cwd" : "/home/ec2-user/tools"
                            },
                            "15configknifessh" : {
                            	  "command" : {
                            	  				"Fn::Join" : ["",[
                            	  									"echo ' ' >> /home/ec2-user/chef11/chef-repo/.chef/knife.rb;",
                            	  									"echo knife[:identity_file] = \\'/home/ec2-user/.pem/",
                            	  									{"Ref" : "KeyName"},
                            	  									".pem\\' >> /home/ec2-user/chef11/chef-repo/.chef/knife.rb;",
                            	  									"echo knife[:ssh_user] = \\'ec2-user\\' >> /home/ec2-user/chef11/chef-repo/.chef/knife.rb"
                            	  				]]
                            	  },
                            	  "cwd" : "/home/ec2-user"
                            },
                            "16downloadsshpem" : {
                            		"command" : {
                            					"Fn::Join" : ["",[
                            								"s3cmd --access_key=",
                            								{"Ref" : "S3KeyId"},
                            								" --secret_key=",
                            								{"Ref" : "S3SecKey"},
                            								" get s3://",
                            								{"Ref" : "ResourceBucket"},
                            								"/",
                            								{"Ref" : "KeyName"},
                            								".pem ./;",
                            								"chmod 600 ",
                            								{"Ref" : "KeyName"},
                            								".pem"
                            					]]
                            		},
                            		"cwd" : "/home/ec2-user/.pem"
                            },
                            "17downloadaccesstobitbucket" : {
                            		"command" : {
                            					"Fn::Join" : ["",[
                            								"s3cmd --access_key=",
                            								{"Ref" : "S3KeyId"},
                            								" --secret_key=",
                            								{"Ref" : "S3SecKey"},
                            								" get s3://",
                            								{"Ref" : "ResourceBucket"},
                            								"/",
                            								{"Ref" : "AuthorizationFile"},
                            								" ./;tar zxf ",
                            								{"Ref" : "AuthorizationFile"},
                            								";chmod 600 bitbucket bitbucket.pub config known_hosts"
                            					]]
                             		},
                            		"cwd" : "/root/.ssh"
                            },
                            "18downloadsourcecode" : {
                            		"command" : {"Fn::Join" : ["",[
                            								"mkdir /var/app/drupal;",
                            								{"Ref" : "DownloadSourceCommand"},
                            								" /var/app/drupal;"
                            		]]},
                            		"cwd" : "/home/ec2-user"
                            },
                            "19installdrupaldb" : {
                            		"command" : {
                            					"Fn::Join" : ["",[
                            								"s3cmd --access_key=",
                            								{"Ref" : "S3KeyId"},
                            								" --secret_key=",
                            								{"Ref" : "S3SecKey"},
                            								" get s3://",
                            								{"Ref" : "ResourceBucket"},
                            								"/deployB.sh ./;chmod +x deployB.sh"
                            					]]
                            		},
                            		"cwd" : "/var/app/"
                            },
                            "20installdrupaldb" : {
                            		"command" : {
                            					"Fn::Join" : ["",[
                            								"sed -i '8s/.*/rootDir=\\/var\\/app\\/drupal/g' ./deployB.sh;",
                            								"./deployB.sh"
                            					]]
                            		},
                            		"cwd" : "/var/app"
                            },
                            "21downloadrecipe" : {
                            		"command" : {
                            				"Fn::Join" : ["",[
                            						"s3cmd --access_key=",
                            						{"Ref" : "S3KeyId"},
                            						" --secret_key=",
                            						{"Ref" : "S3SecKey"},
                            						" get s3://",
                            						{"Ref" : "ResourceBucket"},
                            						"/recipe.tar.gz ./"
                            				]]
                            		},
                            		"cwd" : "/home/ec2-user/tools"
                            },
                            "22downloadrecipe" : 
                            {
                            		"command" : "mv /home/ec2-user/tools/recipe.tar.gz ./;tar zxf recipe.tar.gz;rm recipe.tar.gz;",
                            		"cwd" : "/home/ec2-user/chef11/chef-repo/"
                            },
                            "23uploadcook" : 
                            {
                            		"command" : {
                            					"Fn::Join" : ["",[
                            										"cp /var/app/drupal/sites/default/settings.php cookbooks/drupalsource/templates/default/settings.php.erb;",
                            										"/opt/chef-server/bin/knife cookbook upload --all;",
                            										"/opt/chef-server/bin/knife role from file roles/chefclient.json "
                            					
                            					]]
                            		},
                            		"cwd" : "/home/ec2-user/chef11/chef-repo"
                            },
                            "24addchecknodecron" : {
                            		"command" : "echo '*/2  *  *  *  * root /home/ec2-user/chef11/chef-repo/crontab/validateNode.sh' >> /etc/crontab;chmod +x /home/ec2-user/chef11/chef-repo/crontab/validateNode.sh",
                            		"cwd" : "/home/ec2-user"
                            }
                            
                            
                        }
                    }
                }
            },
            "Properties": {
                "SecurityGroupIds": [
                    {
                        "Ref": "ChefServerSecurityGroup"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "service iptables stop\n",
                                "service ip6tables stop\n",
                                "chkconfig iptables off\n",
                                "chkconfig ip6tables off\n",
                                "export HOME=/root\n",
                                "export RANDFILE=$HOME/chef.rnd\n",
                                "export AWS_CONFIG_FILE=/home/ec2-user/.aws/config\n",
                                "function error_exit\n",
                                "{\n",
                                "  /opt/aws/apitools/cfn-init/bin/cfn-signal -e 1 -r \"$1\" '",
                                {
                                    "Ref": "ChefServerWaitHandle"
                                },
                                "'\n",
                                "  exit 1\n",
                                "}\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-init -v  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "    -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r ChefServer ",
                                "         --access-key ",
                                {
                                    "Ref": "HostKeys"
                                },
                                "         --secret-key ",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                " || error_exit 'Failed to run cfn-init'\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e $? -r 'Chef Server configuration' '",
                                {
                                    "Ref": "ChefServerWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SubnetId" : {
                		"Ref" : "ChefSubnet"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "cfChefServer"
                    },
                    {
                        "Key": "Environment",
                        "Value": "cloudformationChefenv"
                    }
                ]
            }
        },
        "ChefServerUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:DescribeStackResource",
                                        "s3:Put"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "Status": "Active",
                "UserName": {
                    "Ref": "ChefServerUser"
                }
            }
        },
        "ChefServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open up SSH access plus Chef Server required ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "ChefClientSecurityGroup"
                        }
                    }
                ],
                "VpcId" : {"Ref" : "ChefVpc"}
            }
        },
        "ChefClientSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Group with access to Chef Server",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId" : {"Ref" : "ChefVpc"}
            }
        },
        "PrivateKeyBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            },
            "DeletionPolicy": "Delete"
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "WritePolicy",
                    "Statement": [
                        {
                            "Sid": "WriteAccess",
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "PrivateKeyBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "ChefServerUser",
                                        "Arn"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "PrivateKeyBucket"
                }
            }
        },
        "ChefServerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "ChefServerWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ChefServer",
            "Properties": {
                "Handle": {
                    "Ref": "ChefServerWaitHandle"
                },
                "Timeout": "1200"
            }
        }
    },
    "Outputs": {
        "WebUI": {
            "Description": "URL of Opscode chef server WebUI",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ChefServer",
                                "PublicDnsName"
                            ]
                        },
                        ":443"
                    ]
                ]
            }
        },
        "ServerURL": {
            "Description": "URL of newly created Opscode chef server",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ChefServer",
                                "PrivateDnsName"
                            ]
                        },
                        ":443"
                    ]
                ]
            }
        },
        "ChefClientSecurityGroup": {
            "Description": "EC2 Security Group with access to Opscode chef server",
            "Value": {
                "Ref": "ChefClientSecurityGroup"
            }
        },
        "ValidationKeyBucket": {
            "Description": "Location of validation key",
            "Value": {
                "Ref": "PrivateKeyBucket"
            }
        }
    }
}